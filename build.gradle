buildscript {
    apply from: 'script.gradle'
}

plugins {
    id 'java'
    id "application"
    id("io.qameta.allure") version "2.11.2"
    id("io.freefair.lombok") version "6.6.1"
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation('io.qameta.allure:allure-junit5:2.20.1')
    testImplementation("org.assertj:assertj-core:3.24.1")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.19.0")
    implementation("org.apache.logging.log4j:log4j-core:2.19.0")
    implementation("org.slf4j:slf4j-log4j12:2.0.6")
}

test {
    finalizedBy jacocoTestReport
    testLogging.showStandardStreams = true
    useJUnitPlatform() {
        if (project.hasProperty("suite1")) {
            includeTags("smoke")
            excludeTags("regress")
        }
    }

    filter {
        //include all integration tests
        includeTestsMatching "*Test*"
    }
    reports {
        junitXml.outputLocation.set(layout.buildDirectory.dir("test-junit-xml"))
    }

    // and send command: ./gradlew clean test -Ptest_figure_prop1="-5" -Psuite1
    if (project.hasProperty("test_figure_prop1")) {
        // System.setProperty("BROWSER", "FIREFOX");
        systemProperty("test_figure_prop1", "${test_figure_prop1}")
    } else systemProperty("test_figure_prop1", "0")
}

application {
    mainClassName = "org.example.Main"
}

// run ./gradlew assemble    and go to the build/libs folder
/*jar {
    //duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
   // from(configurations.runtimeClasspath.files)
   // from(configurations.runtimeClasspath.files.collect {project.zipTree(it)})
}*/

task copyAllDependencies(type: Copy) {
    jar.dependsOn(copyAllDependencies)
    //dependsOn(jar)

    from(configurations.runtimeClasspath.files)
    into("$buildDir/libs/lib")
}