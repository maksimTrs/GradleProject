import java.time.Duration
import java.time.Instant



//tasks.register('hello')
task hello(description: "hello task", group: "TEST", type: DefaultTask) {
    println "TEST TASK!"

    doLast {
        println "<<<Execution Phase -> Action 2>>>"
    }
    doFirst {
        println "<<<Execution Phase -> Action 1>>>"
    }
    doLast {
        println "<<<Execution Phase -> Action 3>>>"
    }
    doFirst {
        println "<<<Execution Phase -> Action 0>>>"
    }

    println "Task description: <$description>; Task group: <$group>; Actions: <${actions.size()}>; Path task: <$path>"
}


task first(group: "QA") {
    doLast {
        println "Task <first> 1"
    }
}

task second {
    //dependsOn(first)
    // shouldRunAfter(first)
    first.shouldRunAfter(second)

    doLast {
        println "Task <second> 2"
    }
}


task third() {
    second.finalizedBy(third)

    doLast {
        println "Task <third> 3"
    }
}
//second.finalizedBy third


//task fourth(dependsOn: [first, second, third])
task fourth(group: "QA") {
    dependsOn(second, first)

    doLast {
        println "Task <fourth> 4"
    }
}


//gradle.taskGraph.allTasks
gradle.taskGraph.whenReady {
    TaskExecutionGraph taskExecutionGraph ->
        println("<--------- Graph: --------->")
        taskExecutionGraph.allTasks.each {
            println("${it.name}")
        }
        println("<--------- Graph: --------->")
}


gradle.taskGraph.beforeTask { Task task ->
    if (task.group == "QA") {
        task.ext.setProperty("startTime", Instant.now())
    }
}


gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.group == "QA") {
        println task.name + " took " + Duration.between(task.ext.startTime, Instant.now()).toNanos() + " Nanoseconds"
    }
}

defaultTasks("hello", "first")

